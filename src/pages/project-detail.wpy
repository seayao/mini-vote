<style scoped lang="less">
  @import "../styles/index.less";

  .project-detail-container {
    height: 100%;
    min-height: 100%;
    padding: 15px 0;
  }

  .remind-time-wrap {
    width: 100%;
    height: 36px;
    padding: 0 20px;
    margin-bottom: 10px;
    box-sizing: border-box;
    .remind-time {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      border-radius: 4px;
      background: #dfdddb;
      .label {
        display: inline-block;
        height: 20px;
        margin-right: 3px;
        font-size: 14px;
        color: #000;
      }
      .van-count-down {
        color: #1989fa;
      }
    }
  }

  .project-header {
    width: 100%;
    height: auto;
    padding: 0 15px;
    box-sizing: border-box;
    .project-title {
      color: #000;
      font-size: 20px;
      font-weight: bold;
    }
    .project-create {
      display: flex;
      margin: 10px 0;
      .avatar-wrap {
        margin-right: 10px;
      }
      .create-info {
        display: flex;
        justify-content: center;
        flex-direction: column;
        .create-label {
          font-size: 14px;
          color: #808695;
        }
        .create-name {
          font-size: 18px;
          color: #000;
        }
      }
    }
    .content {
      margin-bottom: 5px;
      font-size: 16px;
      color: #000;
    }
    .tips {
      font-size: 14px;
      color: #808695;
    }
  }

  .project-des-wrap {
    padding: 0 10px;
    .cover-img-wrap {
      width: 100%;
      height: 200px;
      margin-top: 8px;
      background: #ededed;
    }
    .des {
      margin-top: 8px;
      text-indent: 2em;
      font-size: 16px;
      color: #000;
    }
  }

  .project-main {
    margin-top: -16px;
    .option-pane-wrap {
      padding: 15px 0;
      border-bottom: 1px solid #ededed;
      box-sizing: border-box;
      .option-pane-preview {
        display: flex;
        padding: 0 16px;
        .option-pane-content {
          width: 100%;
          padding-left: 10px;
          box-sizing: border-box;
          .title {
            margin-bottom: 6px;
            font-size: 18px;
            color: #000;
          }
          .des {
            font-size: 14px;
            .label {
              color: #808695;
            }
            .content {
              color: #ee0a24;
            }
          }
          .score-show-wrap { // 评分展示区域
            width: 100%;
            padding: 5px 5px 0;
            margin-top: 6px;
            border-radius: 4px;
            background: #dfdddb;
            box-sizing: border-box;
            .score-show-preview-wrap {
              float: left;
              width: 50%;
              height: 40px;
              margin-bottom: 5px;
              box-sizing: border-box;
              overflow: hidden;
              .score-show-preview{
                display: flex;
                .score-show-content {
                  padding-left: 10px;
                  font-size: 14px;
                  box-sizing: border-box;
                  .name {
                    color: #000;
                  }
                  .score {
                    color: #2d8cf0;
                  }
                }
              }
            }
          }

          .score-operation-wrap { // 评分操作区域
            margin-top: 6px;
          }
        }
      }
    }
  }

  .project-footer {
    padding: 0 10px;
    margin-top: 20px;
    .operation-wrap {
      padding: 0 20px;
      .btn-wrap {
        margin: 10px 0;
      }
    }
  }
</style>

<wxs module="filter" lang="babel">
  const getTime = (time) => {
  const date = getDate(time)
  const y = date.getFullYear()
  const m = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1
  const d = date.getDate() < 10 ? '0' + date.getDate() : date.getDate()
  const hh = date.getHours() < 10 ? '0' + date.getHours() : date.getHours()
  const mm = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()
  return y + '-' + m + '-' + d + ' ' + hh + ':' + mm
  }
  module.exports.getTime = getTime
</wxs>

<template>
  <div class="container project-detail-container">
    <van-toast id="van-toast" />
    <div class="remind-time-wrap">
      <div v-if="listLoading" class="remind-time">
        <span class="label">加载中...</span>
      </div>
      <div v-else-if="isComplete" class="remind-time">
        <span class="label">该项目已完成</span>
      </div>
      <div v-else-if="isFinish" class="remind-time">
        <span class="label">该项目已结束</span>
      </div>
      <div v-else class="remind-time">
        <span class="label">距离评分结束还有</span>
        <van-count-down
          :time="remindTime"
          format="DD 天 HH 时 mm 分"
          @finish="handleScoreFinish"/>
      </div>
    </div>
    <div class="project-header">
      <div class="project-title">{{ projectInfo.title }}</div>
      <div class="project-create">
        <div class="avatar-wrap">
          <van-image
            :src="projectInfo.createAvatar"
            width="50"
            height="50"
            radius="4"
            fit="cover"
            @click="handlePreImg(projectInfo.createAvatar)"/>
        </div>
        <div class="create-info">
          <div class="create-label">发起人</div>
          <div class="create-name">{{ projectInfo.createUser }}</div>
        </div>
      </div>
      <div class="content">截止日期：{{ filter.getTime(projectInfo.deadline) }}</div>
      <div class="content">评分范围：{{ projectInfo.scoreMin }}~{{ projectInfo.scoreMax }}(分)</div>
      <div class="tips">提示：评完分后方可查看结果</div>
    </div>
    <van-divider />
    <div class="project-des-wrap">
      <div v-if="projectInfo.coverImg" class="cover-img-wrap">
        <van-image
          :src="projectInfo.coverImg"
          width="100%"
          height="100%"
          lazy-load
          fit="cover"
          @click="handlePreImg(projectInfo.coverImg)"/>
      </div>
      <div class="des">{{ projectInfo.description }}</div>
    </div>
    <van-divider />
    <div class="project-main">
      <div v-for="(option, index) in optionList" :key="index" class="option-pane-wrap">
        <van-skeleton
          :loading="listLoading"
          :row="2"
          title
          avatar
          avatar-size="50px"
          avatar-shape="square">
          <div class="option-pane-preview">
            <van-image
              :src="option.optionImg"
              width="50"
              height="50"
              radius="4"
              lazy-load
              fit="cover"
              @click="handlePreImg(option.optionImg)"/>
            <div class="option-pane-content">
              <div class="title">{{ option.optionName }}</div>
              <div class="des">
                <span class="label">平均分：</span>
                <span class="content">{{ option.average }}分</span>
              </div>
              <div v-if="isMeCreate && option.scores && option.scores.length" class="score-show-wrap clearfix">
                <div v-for="s in option.scores" :key="s._id" class="score-show-preview-wrap">
                  <div v-if="s._openid === userInfo._openid" class="score-show-preview">
                    <van-image
                      :src="s.userAvatar"
                      width="40"
                      height="40"
                      radius="4"
                      lazy-load
                      fit="cover"
                      @click="handlePreImg(s.userAvatar)"/>
                    <div class="score-show-content">
                      <div class="name">{{ s.username }}</div>
                      <div class="score">{{ s.score }}分</div>
                    </div>
                  </div>
                </div>
              </div>
              <div v-if="meCanScore" class="score-operation-wrap">
                <van-stepper
                  :value="option.score"
                  :min="projectInfo.scoreMin"
                  :max="projectInfo.scoreMax"
                  @change="handleChangeScore(index, $event)" />
              </div>
            </div>
          </div>
        </van-skeleton>
      </div>
    </div>
    <div class="project-footer">
      <div class="operation-wrap">
        <div v-if="meCanScore" class="btn-wrap">
          <van-button v-if="operationLoading" :disabled="operationLoading" type="info" block>加载中...</van-button>
          <van-button v-else type="info" block @click="handleConfirmScore">提交评分</van-button>
        </div>
        <div class="btn-wrap">
          <van-button open-type="share" block>分享给微信好友</van-button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import wepy from '@wepy/core'
import { mapState } from '@wepy/x'
import store from '@/store'
import { projectDetailApi } from '@/api/project'
import { optionListApi, optionUpdateApi } from '@/api/option'
import { scoreListApi, scoreAddApi } from '@/api/score'
import { messageListApi, messageUpdateApi } from '@/api/message'
import setting from '@/setting'
import Toast from '@/vant/toast/toast'

wepy.page({
  store,
  onLoad(option) {
    this.projectId = option.projectId
    this.projectTitle = option.projectTitle
    this.getDetail(this.projectId)
  },
  onReady() {
    wx.setNavigationBarTitle({
      title: this.projectTitle
    })
  },
  data: {
    listLoading: false,
    operationLoading: false,
    projectId: '',
    projectTitle: '',
    projectInfo: {},
    optionList: [1], // 初始化
    scoreCounter: 0,
    listCounter: 0,
    isMeScore: false,
    isFinish: false, // 项目是否结束
    isComplete: false // 项目是否完成（区别于结束，结束：项目到期，完成：所有嘉宾评分完毕）
  },
  computed: {
    ...mapState(['userInfo']),
    remindTime() { // 评分剩余时间
      return (this.projectInfo.deadline - new Date().getTime())
    },
    meCanScore() {
      if (this.projectInfo.guestIds && this.projectInfo.guestIds.length) {
        return (this.projectInfo.guestIds.includes(this.userInfo._openid) && !this.isMeScore && !this.isFinish)
      } else {
        return false
      }
    },
    isMeCreate() {
      return (this.projectInfo._openid === this.userInfo._openid)
    }
  },
  attached() {},
  methods: {
    getDetail(id) {
      this.listLoading = true
      projectDetailApi(id).then(response => {
        this.projectInfo = response.data
        this.getOptionList(id)

        this.handleGetMsg()


      }).catch(() => {
        this.listLoading = false
      })
    },
    getOptionList(projectId) {
      optionListApi(projectId).then(response => {
        const tempScore = (this.projectInfo.scoreMin || 0)
        this.optionList = response.data.map(v => {
          if (!v.optionImg && v.optionImgCloud) { // 获取云图片的真实地址
            wx.cloud.getTempFileURL({
              fileList: [v.optionImgCloud]
            }).then(response => {
              const res = response.fileList[0]
              const tempData = {
                optionImg: res.tempFileURL
              }
              this.$set(v, 'optionImg', res.tempFileURL)
              this.updateOptionData(v._id, tempData)
            })
          }
          this.$set(v, 'score', tempScore)
          return v
        })
        this.getScoreList() // 获取score数据
      }).catch(() => {
        this.listLoading = false
      })
    },
    updateOptionData(_id, tempData) {
      optionUpdateApi(_id, tempData).then(respones => {
      })
    },
    handleChangeScore(index, event) {
      this.optionList[index].score = event.$wx.detail
    },
    handleConfirmScore() { // 提交评分
      this.handleSubscribe(this.projectInfo) // 处理订阅消息
      this.operationLoading = true
      Toast.loading({
        duration: 0,       // 持续展示 toast
        forbidClick: true, // 禁用背景点击
        message: '加载中...'
      })
      this.scoreCounter = 0
      const time = new Date().getTime()
      this.optionList.forEach(option => { // 从option数据 抽取 score数据
        const tempScore = {
          optionId: option._id,
          username: this.userInfo.username,
          userAvatar: this.userInfo.avatarUrl,
          score: Number(option.score),
          createTime: time
        }
        this.addScoreData(tempScore)
      })
    },
    handleSubscribe(projectInfo) { // 订阅消息 当项目完成时（项目截止或者所有嘉宾投完票），发送服务通知
      let receiveIds = projectInfo.guestIds
      receiveIds.push(projectInfo._openid)
      receiveIds = Array.from(new Set(receiveIds))
      wx.requestSubscribeMessage({
        tmplIds: [setting.subscribeMessageId],
        success(response) {
          if (response.errMsg === 'requestSubscribeMessage:ok') {
            wx.cloud.callFunction({
              name: 'subscribe',
              data: {
                projectId: projectInfo._id,
                title: projectInfo.title,
                createUser: projectInfo.createUser,
                templateId: setting.subscribeMessageId,
                receiveIds,
                page: '/page/personal-info'
              }
            })
          }
        }
      })
    },
    addScoreData(tempScore) { // 提交数据
      scoreAddApi(tempScore).then(response => {
        this.scoreCounter++
        if (this.scoreCounter === this.optionList.length) {
          this.operationLoading = false
          Toast.clear()
          this.getScoreList() // 重新获取评分
        }
      }).catch(() => {
        this.operationLoading = false
        Toast.clear()
      })
    },
    getScoreList() { // 获取每个option的score数据
      this.listCounter = 0
      this.optionList.map(o => {
        scoreListApi(o._id).then(response => {
          this.listCounter++
          const res = (response.data || [])
          if (this.listCounter === this.optionList.length) {
            this.listLoading = false
            this.handleIsMeScore(res)
          }
          // 计算平均分
          const average = res.reduce(this.handleAverage, { avg: 0, n: 0 }).avg
          this.$set(o, 'average', average)
          this.$set(o, 'scores', res)
          return o
        }).catch(() => {
          this.listLoading = false
        })
      })
    },
    handleIsMeScore(temp) { // 我是否评过分
      if (temp && temp.length) {
        temp.forEach(v => {
          return this.isMeScore = (v._openid === this.userInfo._openid)
        })
        if (this.projectInfo.guestIds && this.projectInfo.guestIds.length) {
          return this.isComplete = (temp.length === this.projectInfo.guestIds.length)
        } else {
          this.isComplete = false
        }
      } else {
        this.isMeScore = false
        this.isComplete = false
      }
    },
    handleAverage({ avg, n }, temp) { // 计算平均分
      return { avg: (Number(temp.score) + n * avg) / (n + 1), n: n + 1 }
    },
    handleScoreFinish() {
      this.isFinish = true
    },
    handlePreImg(img) {
      if (img) {
        wx.previewImage({
          current: img, // 当前显示图片的http链接
          urls: [img] // 需要预览的图片http链接列表
        })
      }
    },
    handleGetMsg() { // 获取相关的订阅消息
      const listQuery = {
        projectId: this.projectInfo._id,
        done: false
      }
      messageListApi(listQuery).then(response => {
        const res = response.data
        if (res && res.length) {
          this.handleSendMsg(res[0])
        }
      })
    },
    handleSendMsg(msg) { // 云函数发送订阅消息
      wx.cloud.callFunction({
        name: 'send',
        data: msg
      }).then(() => {
        this.handleUpdateMsg(msg)
      })
    },
    handleUpdateMsg(msg) {
      messageUpdateApi(msg.projectId, { done: true }).then(response => {
        console.log(response)

      })
    }
  }
})
</script>
<config>
{
  "usingComponents": {
    "van-divider": "../vant/divider/index",
    "van-image": "../vant/image/index",
    "van-progress": "../vant/progress/index",
    "van-stepper": "../vant/stepper/index",
    "van-button": "../vant/button/index",
    "van-toast": "../vant/toast/index",
    "van-skeleton": "../vant/skeleton/index",
    "van-count-down": "../vant/count-down/index"
  }
}
</config>
