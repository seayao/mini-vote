<style scoped lang="less">
  @import "../../styles/index.less";

  .create-container {
    padding: 0;
    background: #ededed;
  }

  .create-top {
    background: #fff;
    .cover-wrap {
      margin-left: 10px;
    }
  }

  .create-main {
    padding: 5px;
    margin: 10px 0;
    background: #fff;
    box-sizing: border-box;
    .option-item {
      display: flex;
      align-items: center;
      width: 100%;
      height: 50px;
      padding-left: 80px;
      margin-bottom: 10px;
      box-sizing: border-box;
      .option-item-l {
        display: flex;
        width: 80px;
        margin-left: -80px;
        .option-item-operation {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 30px;
        }
        .option-item-img {
          display: flex;
          align-items: center;
          width: 50px;
          .custom-upload {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 50px;
            height: 50px;
            border-radius: 4px;
            background: #eee;
            .label {
              color: #666;
              font-size: 14px;
            }
          }
        }
      }
      .option-item-r {
        width: 100%;
        height: auto;
        max-height: 58px;
        overflow: hidden;
      }
    }

    .option-item-add {
      display: flex;
      align-items: center;
      width: 100%;
      height: 40px;
      padding-left: 30px;
      box-sizing: border-box;
      .option-item-add-l {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        margin-left: -30px;
      }
      .option-item-add-r {
        display: flex;
        align-items: center;
        width: 100%;
        height: 100%;
        color: #2d8cf0;
      }
    }
  }

  .create-footer {
    background: #fff;
    .value-class {
      flex: none;
      display: flex;
      align-items: center;
    }
    .label-class {
      color: #ee0a24;
      font-size: 12px;
    }
    .picker-date, .picker-time {
      padding: 0 10px;
      label {
        color: #000;
        font-size: 16px;
      }
    }
    .create-btn-wrap {
      padding: 10px 50px 10px;
    }
  }
</style>
<template>
  <div class="container create-container">
    <van-notify id="van-notify" />
    <van-toast id="van-toast" />
    <div v-if="isAuth" class="create-top">
      <van-field
        :value="temp.title"
        size="large"
        required
        type="textarea"
        autosize
        placeholder="标题"
        :custom-style="'font-size: 18px'"
        :placeholder-style="'font-size: 18px'"
        :error-message="titleErrorMsg"
        @change="handleChangeTitle"/>
      <van-field
        :value="temp.description"
        type="textarea"
        size="large"
        :border="false"
        autosize
        placeholder="请输入描述(图片可选)"
        :custom-style="'font-size: 16px'"
        :placeholder-style="'font-size: 16px'"
        @change="handleChangeDes"/>
      <div class="cover-wrap">
        <van-uploader
          name="cover"
          :file-list="coverList"
          :max-count="1"
          image-fit="aspectFill"
          @afterread="afterReadCover"
          @delete="deleteCover"/>
      </div>
    </div>
    <div v-if="isAuth" class="create-main">
      <div v-for="(o, index) in optionList" :key="index" class="option-item">
        <div class="option-item-l">
          <div class="option-item-operation" @click="handleRemoveOption(index)">
            <van-icon name="clear" color="#ed3f14" size="22px"/>
          </div>
          <div class="option-item-img">
            <van-uploader
              :name="o.key"
              :file-list="o.optionImgTemp"
              :max-count="1"
              image-fit="aspectFill"
              use-slot
              preview-size="50px"
              @afterread="afterReadAvatar(index, $event)"
              @delete="deleteAvatar(index)">
              <div class="custom-upload">
                <div class="label">添加</div>
                <div class="label">图片</div>
              </div>
            </van-uploader>
          </div>
        </div>
        <div class="option-item-r">
          <van-field
            :value="o.optionName"
            :error-message="o.optionErrorMsg"
            required
            clearable
            placeholder="请输入选项内容"
            @change="handleChangeUserName(index, $event)"/>
        </div>
      </div>
      <div class="option-item-add" @click="handleAddOption">
        <div class="option-item-add-l">
          <van-icon name="add" color="#2d8cf0" size="22px"/>
        </div>
        <div class="option-item-add-r">添加选项</div>
      </div>
    </div>
    <div class="create-footer">
      <van-cell-group>
        <van-cell
          title="选择嘉宾"
          :value="'已选 '+guestList.length+' 位嘉宾'"
          is-link
          link-type="navigateTo"
          url="/pages/select-user"
          use-label-slot
          label-class="label-class">
          <div slot="label">{{ guestErrorMsg }}</div>
        </van-cell>
        <van-cell
          v-if="isAuth"
          title="评分范围(小)">
          <van-stepper :value="temp.scoreMin" :min="0" :max="temp.scoreMax" @change="handleChangeScoreMin"/>
        </van-cell>
        <van-cell
          v-if="isAuth"
          title="评分范围(大)">
          <van-stepper :value="temp.scoreMax" :min="temp.scoreMin" @change="handleChangeScoreMax"/>
        </van-cell>
        <van-cell
          v-if="isAuth"
          title="是否公开项目"
          use-label-slot>
          <div slot="label">{{ openMsg }}</div>
          <van-switch :checked="temp.isOpen" size="24px" @change="changeOpen"/>
        </van-cell>
        <van-cell
          value-class="value-class"
          title="截止时间"
          use-label-slot
          label-class="label-class">
          <div slot="label">{{ deadlineErrorMsg }}</div>
          <picker :value="deadlineDate" mode="date" class="picker-date" :start="deadlineDateMin" end="2100-12-31" @change="handleChangeDate">
            <label>{{ deadlineDate }}</label>
          </picker>
          <picker :value="deadlineTime" mode="time" class="picker-time" :start="deadlineTimeMin" end="23:59" @change="handleChangeTime">
            <label>{{ deadlineTime }}</label>
          </picker>
        </van-cell>
      </van-cell-group>
      <div class="create-btn-wrap">
        <van-button v-if="!isReg" type="primary" block open-type="getUserInfo" bindgetuserinfo="handleAddUser">未授权，授权登录？</van-button>
        <van-button v-if="isReg && operationLoading" :disabled="operationLoading" :loading="operationLoading" type="info" block>加载中...</van-button>
        <van-button v-if="isReg && !operationLoading"  type="info" block @click="handleAdd">创建项目</van-button>
      </div>
    </div>
  </div>
</template>

<script>
import wepy from '@wepy/core'
import { mapState } from '@wepy/x'
import store from '@/store'
import { createUniqueString, formatDate, formatTime } from '@/utils'
import { userAddApi } from '@/api/user'
import { projectAddApi } from '@/api/project'
import { optionAddApi } from '@/api/option'
import Notify from '@/vant/notify/notify'
import Toast from '@/vant/toast/toast'

wepy.page({
  store,
  data: {
    operationLoading: false,
    coverList: [],
    optionList: [{
      key: 'option_0',
      optionName: '',
      optionImgTemp: [],
      optionErrorMsg: ''
    }],
    deadlineDateMin: formatDate(),
    deadlineTimeMin: formatTime(),
    deadlineDate: formatDate(1),
    deadlineTime: formatTime(),
    temp: { // 提交数据库数据
      createUser: '',
      createAvatar: '',
      title: '',
      description: '',
      coverImgCloud: '',
      coverImg: '',
      guestIds: [],
      scoreMin: 0,
      scoreMax: 10,
      isOpen: false,
      deadline: 0
    },
    titleErrorMsg: '',
    guestErrorMsg: '',
    deadlineErrorMsg: '',
    openMsg: '',
    projectId: '', // 项目创建成功后的id
    projectTitle: '', // 项目title
    optionCounter: 0 // 新增option计数器
  },
  computed: {
    ...mapState(['userInfo', 'guestList']),
    openMsg() {
      return (this.temp.isOpen ? '所有人可以查看该项目' : '仅参与的嘉宾可以查看')
    },
    isReg() {
      return (this.userInfo && this.userInfo._id)
    },
    isAuth() {
      return (this.userInfo && this.userInfo.state === 1)
    }
  },
  watch: {
    guestList(val) {
      if (val && val.length) {
        this.guestErrorMsg = ''
      } else {
        this.guestErrorMsg = '至少选择 1 位嘉宾'
      }
    }
  },
  attached() {
  },
  methods: {
    handleChangeTitle(event) {
      this.temp.title = event.$wx.detail
      if (event.$wx.detail) {
        this.titleErrorMsg = ''
      } else {
        this.titleErrorMsg = '标题不能为空'
      }
    },
    handleChangeDes(event) {
      this.temp.description = event.$wx.detail
    },
    afterReadCover(event) { // 封面预览
      const { file } = event.$wx.detail
      this.coverList.push(file)
    },
    deleteCover(event) { // 封面删除
      const { index } = event.$wx.detail
      this.coverList.splice(index, 1)
    },
    afterReadAvatar(index, event) { // 头像预览
      const { file } = event.$wx.detail
      this.optionList[index].optionImgTemp.push(file)
    },
    deleteAvatar(index) { // 头像删除
      this.optionList[index].optionImgTemp = []
    },
    handleAddOption() {
      const tempOption = {
        key: 'option_' + this.optionList.length,
        optionName: '',
        optionImgTemp: [],
        optionErrorMsg: ''
      }
      this.optionList.push(tempOption)
    },
    handleRemoveOption(index) {
      if (this.optionList.length > 1) {
        this.optionList.splice(index, 1)
      } else {
        this.optionList[0].optionErrorMsg = '至少添加一个选项'
      }
    },
    handleChangeUserName(index, event) {
      this.optionList[index].optionName = event.$wx.detail
      if (event.$wx.detail) {
        this.optionList[index].optionErrorMsg = ''
      } else {
        this.optionList[index].optionErrorMsg = '选项内容不能为空'
      }
    },
    handleChangeScoreMin(event) {
      this.temp.scoreMin = event.$wx.detail
    },
    handleChangeScoreMax(event) {
      this.temp.scoreMax = event.$wx.detail
    },
    changeOpen() {
      this.temp.isOpen = !this.temp.isOpen
    },
    handleChangeDate(event) {
      this.deadlineDate = event.$wx.detail.value
    },
    handleChangeTime(event) {
      this.deadlineTime = event.$wx.detail.value
    },
    resetTemp() { // 重置数据
      this.temp = { // 提交数据库数据
        createUser: '',
        createAvatar: '',
        title: '',
        description: '',
        coverImgCloud: '',
        coverImg: '',
        guestIds: [],
        scoreMin: 0,
        scoreMax: 10,
        isOpen: false,
        deadline: 0
      }
      this.coverList = []
      this.optionList = [{
        key: 'option_0',
        optionName: '',
        optionImgTemp: [],
        optionErrorMsg: ''
      }]
      this.deadlineDateMin = formatDate()
      this.deadlineTimeMin = formatTime()
      this.deadlineDate = formatDate(1)
      this.deadlineTime = formatTime()
      store.dispatch('setGuestList', []) // 存储嘉宾到store
    },
    handleAdd() { // 点击了发起
      const deadlineStr = this.deadlineDate + ' ' + this.deadlineTime
      this.temp.deadline = new Date(deadlineStr.replace(/-/g, '/')).getTime()
      if (this.temp.title === '') {
        this.titleErrorMsg = '标题不能为空'
      } else if (!this.optionList || !this.optionList.length) {
        Notify('请至少添加一个选项')
      } else if (this.temp.deadline < new Date().getTime()) {
        this.deadlineErrorMsg = '截止时间不能早于当前时间'
      } else {
        let isValid = true
        this.optionList.forEach((option, index) => {
          if (option.optionName === '') {
            this.optionList[index].optionErrorMsg = '选项内容不能为空'
            return isValid = false
          }
        })
        if (isValid) {
          if (!this.guestList || !this.guestList.length) {
            this.guestErrorMsg = '至少选择 1 位嘉宾'
          } else { // 验证成功提交数据
            this.guestErrorMsg = ''
            this.handleAddData()
          }
        }
      }
    },
    handleAddData() {
      this.operationLoading = true
      Toast.loading({
        duration: 0,       // 持续展示 toast
        forbidClick: true, // 禁用背景点击
        message: '加载中...'
      })
      this.temp.createUser = this.userInfo.username
      this.temp.createAvatar = this.userInfo.avatarUrl
      this.temp.guestIds = this.guestList
      let tempData = null
      if (this.coverList && this.coverList.length) { // 处理封面图
        const filePath = this.coverList[0].path
        const cloudPath = createUniqueString() + filePath.match(/\.[^.]+?$/)
        wx.cloud.uploadFile({
          cloudPath,
          filePath, // 文件路径
        }).then(response => {
          this.temp.coverImgCloud = response.fileID
          tempData = Object.assign({}, this.temp, {
            state: 1, // 默认启用项目
            createTime: new Date().getTime()
          })
        })
      } else {
        tempData = Object.assign({}, this.temp, {
          state: 1, // 默认启用项目
          createTime: new Date().getTime()
        })
      }



      return false

      this.addData(tempData)
    },
    addData(tempData) {
      projectAddApi(tempData).then(response => {
        this.projectId = response._id // 保存项目id
        this.projectTitle = this.temp.title
        this.handleAddOptionData()// 添加option
        this.resetTemp() // 重置数据
      }).catch(() => {
        this.operationLoading = false
        Toast.clear()
      })
    },
    handleAddOptionData() {
      this.optionCounter = 0
      this.optionList.forEach(option => { // 处理option数据
        let tempOption = null
        if (option.optionImgTemp && option.optionImgTemp.length) { // 处理图片上传
          const filePath = option.optionImgTemp[0].path
          const cloudPath = createUniqueString() + filePath.match(/\.[^.]+?$/)
          wx.cloud.uploadFile({
            cloudPath,
            filePath, // 文件路径
          }).then(response => {
            tempOption = {
              projectId: this.projectId,
              optionName: option.optionName,
              optionImg: '',
              optionImgCloud: response.fileID,
              average: 0
            }
            this.addOptionData(tempOption)
          })
        } else {
          tempOption = {
            projectId: this.projectId,
            optionName: option.optionName,
            optionImg: '',
            optionImgCloud: '',
            average: 0
          }
          this.addOptionData(tempOption)
        }
      })
    },
    addOptionData(tempOption) { // 新增option数据
      optionAddApi(tempOption).then(response => {
        this.optionCounter++
        if (this.optionCounter === this.optionList.length) {
          this.operationLoading = false
          Toast.clear()
          store.dispatch('setIsRefresh', true) // 刷新首页数据
          this.$navigate({ url: '/pages/project-detail?projectId='+this.projectId+'&projectTitle='+this.projectTitle })  // 跳转页面
        }
      }).catch(() => {
        this.operationLoading = false
        Toast.clear()
      })
    },
    handleAddUser(event) { // 授权获取用户信息
      const userInfo = event.$wx.detail.userInfo
      if (userInfo) { // 同意授权
        this.addUserData(userInfo)
      }
    },
    addUserData(data) {
      Toast.loading({
        duration: 0,       // 持续展示 toast
        forbidClick: true, // 禁用背景点击
        message: '加载中...'
      })
      const tempData = Object.assign({}, data, {
        username: data.nickName,
        state: 0, // 默认用户禁用
        role: 'user',
        createTime: new Date().getTime(),
        updateTime: new Date().getTime()
      })
      userAddApi(tempData).then(response => {
        Toast.success({
          forbidClick: true, // 禁用背景点击
          message: '登录成功'
        })
        const temp = Object.assign({}, tempData, {_id: response._id})
        store.dispatch('setUserInfo', temp) // 存储用户信息到store
      }).catch(() => {
        Toast.clear()
      })
    }
  }
})
</script>
<config>
{
  "navigationBarTitleText": "创建",
  "usingComponents": {
    "van-uploader": "../../vant/uploader/index",
    "van-field": "../../vant/field/index",
    "van-icon": "../../vant/icon/index",
    "van-cell": "../../vant/cell/index",
    "van-cell-group": "../../vant/cell-group/index",
    "van-switch": "../../vant/switch/index",
    "van-button": "../../vant/button/index",
    "van-stepper": "../../vant/stepper/index",
    "van-notify": "../../vant/notify/index",
    "van-toast": "../../vant/toast/index"
  }
}
</config>
